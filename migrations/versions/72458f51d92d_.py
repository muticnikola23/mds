"""

Revision ID: 72458f51d92d
Revises: 
Create Date: 2024-12-06 19:31:22.560237

"""

import csv
from typing import Sequence, Union
from datetime import datetime

from sqlalchemy.orm import Session
import sqlalchemy as sa
from alembic import op

from models.stocks import Stock, StockHistory

# revision identifiers, used by Alembic.
revision: str = "72458f51d92d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "stocks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("symbol", sa.String(), nullable=False),
        sa.Column("founded", sa.DateTime(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_stocks_id"), "stocks", ["id"], unique=False)
    op.create_table(
        "stock_histories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("stock_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column("open", sa.Float(), nullable=False),
        sa.Column("high", sa.Float(), nullable=False),
        sa.Column("low", sa.Float(), nullable=False),
        sa.Column("close", sa.Float(), nullable=False),
        sa.Column("adjusted_close", sa.Float(), nullable=False),
        sa.Column("volume", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["stock_id"],
            ["stocks.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_stock_histories_id"), "stock_histories", ["id"], unique=False
    )
    # ### end Alembic commands ###

    csv_file = "migrations/fixtures/stocks.csv"
    bind = op.get_bind()

    session = Session(bind=bind)
    try:
        with open(csv_file, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                stock = Stock(
                    name=row["Name"],
                    symbol=row["Symbol"],
                    founded=datetime.strptime(row["Founded"], "%Y-%m-%d"),
                    description=row["Description"],
                )
                session.add(stock)
        session.commit()
    except Exception as e:
        session.rollback()
        raise e
    finally:
        session.close()

        csv_files = [
            "migrations/fixtures/amazon.csv",
            "migrations/fixtures/google.csv",
            "migrations/fixtures/facebook.csv",
            "migrations/fixtures/netflix.csv",
            "migrations/fixtures/apple.csv",
        ]

        # Create a session
        session = Session(bind=bind)

        def safe_float(value, default=0.0):
            try:
                return (
                    float(value)
                    if value and value.lower() != "null"
                    else default
                )
            except ValueError:
                return default

        try:
            for file_path in csv_files:
                company_name = file_path.split("/")[-1].split(".")[0]
                stock = (
                    session.query(Stock)
                    .filter_by(name=company_name)
                    .one_or_none()
                )
                if not stock:
                    print(f"No matching stock found for '{company_name}'")
                    continue

                with open(file_path, newline="", encoding="utf-8") as f:
                    reader = csv.DictReader(f)
                    for row in reader:
                        history = StockHistory(
                            stock_id=stock.id,
                            date=(
                                datetime.strptime(row["Date"], "%Y-%m-%d")
                                if row["Date"]
                                else None
                            ),
                            open=safe_float(row["Open"], 0.0),
                            high=safe_float(row["High"], 0.0),
                            low=safe_float(row["Low"], 0.0),
                            close=safe_float(row["Close"], 0.0),
                            adjusted_close=safe_float(row["Adj Close"], 0.0),
                            volume=(
                                int(row["Volume"])
                                if row["Volume"] and row["Volume"].isdigit()
                                else 0
                            ),
                        )
                        session.add(history)
                    session.commit()
        except Exception as e:
            session.rollback()
            raise e
        finally:
            session.close()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_stock_histories_id"), table_name="stock_histories")
    op.drop_table("stock_histories")
    op.drop_index(op.f("ix_stocks_id"), table_name="stocks")
    op.drop_table("stocks")
    # ### end Alembic commands ###
